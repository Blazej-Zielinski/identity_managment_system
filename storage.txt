// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

contract CertificatesStorage {
    string public name = "CertificatesStorage";

    //store accepted certificates
    uint public certificatesCount = 0; // for id generations
    mapping(address => Certificate[]) public certificates;

    //store awaiting certificates
    uint public awaitingCertificatesCount = 0; // for id generations
    mapping(address => Certificate[]) public awaitingCertificates;

    struct Certificate {
        uint id;
        address issuer;
        address owner;
        string ipfsHash;
        string issuerSignature;
    }

    event CertificateCreated (
        uint id,
        address issuer,
        address owner,
        string ipfsHash,
        string issuerSignature
    );

    event CertificateAccepted (
        uint id,
        address issuer,
        address owner,
        string ipfsHash,
        string issuerSignature
    );

    // Create certificate ( certificate awaits for acceptance by the owner )
    function createCertificate(address _owner, string memory _ipfsHash, string memory _issuerSignature) public {
        // Make sure issuer address exists
        require(msg.sender != address(0x0));

        // Make sure owner address exists
        require(_owner != address(0x0));

        // Make sure the data hash exists
        require(bytes(_ipfsHash).length > 0);

        // Make sure the issuer signature exists
        require(bytes(_issuerSignature).length > 0);

        // Increment certificate id
        awaitingCertificatesCount ++;

        // Add certificate to map
        awaitingCertificates[_owner].push(Certificate(awaitingCertificatesCount, msg.sender, _owner, _ipfsHash, _issuerSignature));

        // Trigger an event
        emit CertificateCreated(awaitingCertificatesCount, msg.sender, _owner, _ipfsHash, _issuerSignature);
    }

    function acceptCertificate(uint _id, string memory _ipfsHash) public {
        // Make sure msg.sender exists
        require(msg.sender != address(0x0));

        // Make sure the _id is correct
        require(_id > 0 && _id <= awaitingCertificatesCount);

        // Make sure the data hash exists
        require(bytes(_ipfsHash).length > 0);

        // Getting proper certificate
        Certificate[] storage userCertificates = awaitingCertificates[msg.sender];
        Certificate memory certificate;
        uint certificateIndex;
        for (uint i = 0; i < userCertificates.length; i++) {
            if (userCertificates[i].id == _id) {
                certificate = userCertificates[i];
                certificateIndex = i;
            }
        }

        // Only owner can accept certificate
        require(msg.sender == certificate.owner);

        // Increment certificate id
        certificatesCount ++;

        // Changes certificate attributes
        certificate.id = certificatesCount;
        certificate.ipfsHash = _ipfsHash;

        // Add certificate to map
        certificates[msg.sender].push(certificate);

        // Deleting awaiting certificate
        for (uint i = certificateIndex; i < userCertificates.length - 1; i++) {
            userCertificates[i] = userCertificates[i + 1];
        }
        awaitingCertificates[msg.sender] = userCertificates;

        // Trigger an event
        emit CertificateAccepted(certificatesCount, certificate.issuer, certificate.owner, _ipfsHash, certificate.issuerSignature);
    }

    //    function getCertificates() public view returns(Certificate[]){
    //        // Make sure msg.sender exists
    //        require(msg.sender != address(0x0));
    //
    //        Certificate[] userCertificates;
    //
    //        for(uint i=)
    //
    //        return hey;
    //    }
}


"https://ipfs.infura.io/ipfs/QmdUrMZfwAWsZfNoMVnuPRoAV5CP6ygU1AFiknttgoedhQ"


RzÄ…d
"l6pvBS9GzHf8ZJSXLh4uwjFff8E0x4h9E2KVW4McVlo="
"6zRP0nBASVjhudLqyk/F7UXqUjaxKNB3TDgfnqJiw0yXqm8FL0bMd/xklJcuHi7CMV9/wTTHiH0TYpVbgxxWWg=="


Urzytkownik
"Mwu78wLf4vIL6PiaLkQDNo6dOIzM3/wplpd3kN2XEWY="
"yhksXY5rKT9k+RumMtqQJ2sdCAfFin1VzmAnqc9eOU8zC7vzAt/i8gvo+JouRAM2jp04jMzf/CmWl3eQ3ZcRZg=="


address
0xBD5747B7BA7Bb8FdEEC7A3f7bB277a59ce89cF21